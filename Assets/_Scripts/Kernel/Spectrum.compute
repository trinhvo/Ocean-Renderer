// #define BUFFER
#define INVPI2	0.63661977236f
#define HPI		1.57079632679f
#define PI		3.14159265358f
#define PI2		6.28318530717f
#define GRAVITY 9.82f
#define HSQRT2  0.70710678118f

#pragma kernel SpecInit
#pragma kernel SpecUpdate

uint size;
float domainSize;
float windSpeed;

uint Hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

uint rngState;

uint Rand()
{
	rngState ^= (rngState << 13);
	rngState ^= (rngState >> 17);
	rngState ^= (rngState << 5);
	return rngState;
}

float RandFloat()
{
	return Rand() / 4294967296.0f;
}

float RandGauss()
{
	float u1 = RandFloat();
	float u2 = RandFloat();
	if (u1 < 1e-6f)
		u1 = 1e-6f;
	return sqrt(-2.0f * log(u1)) * cos(PI2 * u2);
}

// G(omega, theta)
float DirectionalFunc(float theta)
{
	if (theta > PI)
		theta -= 2 * PI;
	if (theta < -PI)
		theta += 2 * PI;

	if (theta > -HPI && theta < HPI)
		return INVPI2 * pow(cos(theta), 2);
	else
		return 0.0f;
}

// S(omega)
float ABSpectrum(float w)
{
	// 由系数A(Alpha)和B(Beta)确定的波谱
	float A = 1;
	float B = 1;
	float w0 = GRAVITY / windSpeed;
	return A * GRAVITY * GRAVITY / pow(w, 5.0) * exp(-B * pow(w0 / w, 4.0));
}

// 复数乘法
float2 CMul(float2 lhs, float2 rhs)
{
	return float2(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x);
}

RWTexture2D<float4> outputH0;

[numthreads(32, 32, 1)]
// uint2 id 代表当前计算点的二维坐标
void SpecInit(uint2 id : SV_DispatchThreadID)
{
	// 坐标调整
	uint2 center = size.xx / 2; 
	uint2 coord = id - center;

	// 防止溢出
	if (coord.x == 0 && coord.y == 0)
	{
		outputH0[id] = float4(0, 0, 0, 0);
		return;
	}
	
	// 这一部分涉及积分换元 见公式推导
	// k代表波数分量 波数=1/波长 domainSize为风场大小/海面真实大小
	float dk = PI2 / domainSize;
	float2 k = PI2 * coord / domainSize;
	float kMag = length(k);

	// Init seed
	rngState = Hash(id.y * size + id.x);

	// Dispersion
	float w = sqrt(abs(GRAVITY * kMag));
	float dwdk = GRAVITY / (2.0 * w);

	// 计算 S(w)
	float spectrum = ABSpectrum(w);

	// 计算 D(w,θ)
	// 风向角参与计算就可以调整波形的传播方向 取值区间[-PI, PI]
	float windAngle = PI;
	float thetaPos = atan2(k.y, -k.x) - windAngle;
	float thetaNeg = atan2(-k.y, k.x) - windAngle;
	float directionalSpreadingPos = DirectionalFunc(thetaPos);
	float directionalSpreadingNeg = DirectionalFunc(thetaNeg);

	// 计算 S(k) = sqrt(2 * S(w,θ) * |dwdk / kMag| * dk * dk)
	// 其中 S(w,θ) = S(w) * D(w,θ)
	float spectralAmplitudePos = RandGauss() * sqrt(2.0 * spectrum * directionalSpreadingPos * abs(dwdk / kMag) * dk * dk);
	float spectralAmplitudeNeg = RandGauss() * sqrt(2.0 * spectrum * directionalSpreadingNeg * abs(dwdk / kMag) * dk * dk);

	// Random Phase
	float phasePos = RandFloat() * PI2;
	float phaseNeg = RandFloat() * PI2;

	// h(k).R | h(k).I | h(-k).R | h(-k).I
	// 注意不同文献材料中虚数单位j与i的差异j = -i 这里我统一用j
	outputH0[id] = float4(spectralAmplitudePos * cos(phasePos), spectralAmplitudePos * -sin(phasePos), spectralAmplitudeNeg * cos(phaseNeg), spectralAmplitudeNeg * -sin(phaseNeg));
}

float time;

Texture2D<float4> inputH0;

#ifdef BUFFER
RWStructuredBuffer<float2> outputH;
RWStructuredBuffer<float2> outputDx;
RWStructuredBuffer<float2> outputDy;
#else
RWTexture2D<float2> outputH;
RWTexture2D<float2> outputDx;
RWTexture2D<float2> outputDy;
#endif

[numthreads(32, 32, 1)]
void SpecUpdate(uint2 id : SV_DispatchThreadID)
{
	// 坐标调整
	uint2 center = size.xx / 2;
	uint2 coord = id - center;

	// Find wave vector and number
	float2 k = PI2 * coord / domainSize;
	float kMag = length(k);

	// Dispersion
	// w => omega(k) | dwdk => d(omega(k))/d(k)
	float w = sqrt(abs(GRAVITY * kMag));

	float sw;
	float cw;
	sincos(w * time, sw, cw);

	float2 fwd = float2(cw, -sw);	// cos(w(k)t) - jsin(w(k)t)
	float2 bkwd = float2(cw, sw);	// cos(w(k)t) + jsin(w(k)t)

	float4 h0 = inputH0[id];
	float2 h = CMul(h0.xy, fwd) + CMul(h0.zw, bkwd);

#ifdef BUFFER
	uint id2 = id.y * size + id.x;
	outputH[id2] = h;
	outputDx[id2] = float2(-h.y * k.x, h.x * k.x) / (kMag + 0.00001);
	outputDy[id2] = float2(-h.y * k.y, h.x * k.y) / (kMag + 0.00001);
#else
	outputH[id] = h;
	outputDx[id] = float2(-h.y * k.x, h.x * k.x) / (kMag + 0.00001);
	outputDy[id] = float2(-h.y * k.y, h.x * k.y) / (kMag + 0.00001);
#endif
}