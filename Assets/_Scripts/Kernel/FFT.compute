// #define BUFFER
#pragma kernel FFT SIZE=128 PASSES=7 CHANNEL=x TX=128 TY=1 FINAL=0
#pragma kernel FFT SIZE=128 PASSES=7 CHANNEL=y TX=1 TY=128 FINAL=1
#pragma kernel FFT SIZE=256 PASSES=8 CHANNEL=x TX=256 TY=1 FINAL=0
#pragma kernel FFT SIZE=256 PASSES=8 CHANNEL=y TX=1 TY=256 FINAL=1
#pragma kernel FFT SIZE=512 PASSES=9 CHANNEL=x TX=512 TY=1 FINAL=0
#pragma kernel FFT SIZE=512 PASSES=9 CHANNEL=y TX=1 TY=512 FINAL=1
#pragma kernel FFT SIZE=1024 PASSES=10 CHANNEL=x TX=1024 TY=1 FINAL=0
#pragma kernel FFT SIZE=1024 PASSES=10 CHANNEL=y TX=1 TY=1024 FINAL=1

Texture2D<float2> inputButterfly;

#ifdef BUFFER
RWStructuredBuffer<float2> input;
#if !FINAL
RWStructuredBuffer<float2> output;
#else
RWStructuredBuffer<float> output;
RWTexture2D<float> outputRT;
#endif
#else
RWTexture2D<float2> input;
#if !FINAL
RWTexture2D<float2> output;
#else
RWTexture2D<float> output;
#endif
#endif

groupshared float2 intermediates[SIZE];
groupshared float2 scratch[SIZE];

void ButterflyPass(float2 butterfly, uint coord, uint passIndex)
{
	uint indexA, indexB;

	uint offset = 1 << passIndex;
	if ((coord / offset) % 2 == 1)
	{
		indexA = coord - offset;
		indexB = coord;
	}
	else
	{
		indexA = coord;
		indexB = coord + offset;
	}

	if (passIndex == 0)
	{
		indexA = reversebits(indexA) >> (32 - PASSES);
		indexB = reversebits(indexB) >> (32 - PASSES);
	}

	const bool tag = (passIndex % 2) == 0;

	float2 valueA, valueB;
	if (tag)
	{
		valueA = intermediates[indexA];
		valueB = intermediates[indexB];
	}
	else
	{
		valueA = scratch[indexA];
		valueB = scratch[indexB];
	}

	float2 weight = butterfly.xy;
	float2 weightedValueB = weight * valueB.r + weight.gr * valueB.g * float2(-1, 1);
	float2 result = valueA + weightedValueB;

	if (tag)
		scratch[coord] = result;
	else
		intermediates[coord] = result;
}

float2 Conj(float2 v)
{
	return float2(v.x, -v.y);
}

[numthreads(TX, TY, 1)]
void FFT(uint2 id : SV_DispatchThreadID)
{
	uint coord = id.CHANNEL;

#ifdef BUFFER
	uint id2 = id.y * SIZE + id.x;
#if !FINAL
	intermediates[coord] = Conj(input[id2]);
#else
	intermediates[coord] = input[id2];
#endif
#else
#if !FINAL
	intermediates[coord] = Conj(input[id]);
#else
	intermediates[coord] = input[id];
#endif
#endif

	[unroll(PASSES)]
	for (uint passIndex = 0; passIndex < PASSES; ++passIndex)
	{
		GroupMemoryBarrierWithGroupSync();
		ButterflyPass(inputButterfly[uint2(coord, passIndex)], coord, passIndex);
	}

	GroupMemoryBarrierWithGroupSync();

	const bool tag = (PASSES % 2) == 0;
	const float2 result = tag ? intermediates[coord] : scratch[coord];

#ifdef BUFFER
#if !FINAL
	output[id2] = result;
#else
	const float sign = ((id.x + id.y) % 2) == 1 ? -1.0f : 1.0f;
	output[id2] = sign * result.x;
	outputRT[id] = sign * result.x;
#endif
#else
#if !FINAL
	output[id] = result;
#else
	const float sign = ((id.x + id.y) % 2) == 1 ? -1.0f : 1.0f;
	output[id] = sign * result.x;
#endif
#endif
}